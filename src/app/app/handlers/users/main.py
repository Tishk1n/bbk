from os import getenv

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.database.models import User
from app.errors.users.url_error import UrlError
from app.keyboards.users.main import politics_keyboard, from_keyboard
from app.keyboards.users.menu import menu_keyboard
from app.states.users.main import AcceptStates
from app.utils.serializer import convert_from_dict_to_str

router = Router()
channel_id = getenv('CHANNEL_ID')


@router.message(Command(commands='start'))
async def cmd_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    if await User.exists(id_tg=message.from_user.id):
        user = await User.get(id_tg=message.from_user.id)
        if user.active:
            await message.answer('üßæ –ú–µ–Ω—é', reply_markup=menu_keyboard)
            return
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        return
    await message.answer(f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî• GARAGE TEAM BOT üî•!

–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:

1Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–¥–∏–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º (–ø–æ—Ä–Ω–æ, –Ω–∞—Å–∏–ª–∏–µ, —É–±–∏–π—Å—Ç–≤–∞, –ø—Ä–∏–∑—ã–≤—ã –∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º—É, —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤).
2Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º, —Ñ–ª—É–¥, –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã.
3Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
4Ô∏è‚É£ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ—Ä–∫–µ—Ä–æ–≤.
5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—Ç–∫ —á–µ–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –∫—É—Ä–∏–ª–∫–µ.

–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã?""", reply_markup=politics_keyboard)
    await state.set_state(AcceptStates.CHOICE)


@router.callback_query(AcceptStates.CHOICE, text='accept')
async def btn_accept(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.answer('‚ùî –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?', reply_markup=from_keyboard)
    await state.set_state(AcceptStates.FROM)


@router.callback_query(AcceptStates.FROM)
async def btn_from(call: CallbackQuery, state: FSMContext) -> None:
    match call.data:
        case 'lolz':
            msg: str = '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ lolz'
        case 'advertisement':
            msg: str = '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É —Å —Ä–µ–∫–ª–∞–º–æ–π'
        case 'friend':
            msg: str = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞'
        case _:
            msg: str = '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å'
    await state.update_data(source=call.data)
    await call.message.answer(msg)
    await state.set_state(AcceptStates.URL)


@router.message(AcceptStates.URL)
async def get_url(message: Message, state: FSMContext) -> None:
    msg: str = 'üåã –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å/–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –¥—Ä—É–≥–æ–π —Ç–∏–º–µ, –ø–æ—á–µ–º—É —Ä–µ—à–∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É?'
    if '@' in message.text or 'http' in message.text:
        await message.answer(msg)
        await state.update_data(url=message.text)
        await state.set_state(AcceptStates.WHY)
        return
    raise UrlError


@router.message(AcceptStates.WHY)
async def get_why(message: Message, state: FSMContext, bot: Bot) -> None:
    await state.update_data(why=message.text)
    data: dict = await state.get_data()
    msg: str = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ'
    await User(id_tg=message.from_user.id).save()
    await message.answer(msg)
    await state.clear()
    await bot.send_message(channel_id, convert_from_dict_to_str(message.from_user.id, data))


@router.callback_query(text='failure')
async def btn_failure(call: CallbackQuery, state: FSMContext) -> None:
    msg: str = '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞!'
    await call.message.answer(msg, reply_markup=politics_keyboard)
